%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.6.2
%%CreationDate: Tue Apr 23 16:45:41 2024
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUUAUCAAAAGAGAAAAAAAAAAACUCGCUUAUAGUGCUUAUAUAUAUAUGCUUAGAAAGCAUCAAAAAAGAUGCACUAAGCAAUAUAUAUAUAAGUGCUAUAAGCAAGAUAAGC\
) } def
/len { sequence length } bind def

/coor [
[116.75378418 218.76992798]
[116.75378418 203.76992798]
[116.75378418 188.76992798]
[116.75378418 173.76992798]
[116.75378418 158.76992798]
[116.75378418 143.76992798]
[116.75378418 128.76992798]
[110.30952454 124.93306732]
[102.63558960 137.82145691]
[89.74732208 130.14730835]
[97.42100525 117.25933838]
[90.97674561 113.42247772]
[77.78968811 120.57101440]
[64.60262299 127.71954346]
[64.87187958 143.02267456]
[57.98820877 156.69285583]
[45.53343201 165.58876038]
[30.36956215 167.66616821]
[15.98114872 162.44773865]
[5.67454243 151.13258362]
[1.81812704 136.32087708]
[5.29807758 121.41623688]
[15.31472778 109.84362793]
[29.56632423 104.26235199]
[44.77795410 105.95495605]
[57.45409775 114.53248596]
[70.64115143 107.38394928]
[83.82820892 100.23542023]
[94.50577545 89.70025635]
[101.83070374 76.61035919]
[109.15562439 63.52045822]
[116.48055267 50.43056107]
[123.80547333 37.34066010]
[131.13040161 24.25076103]
[138.45532227 11.16086197]
[145.78025818 -1.92903709]
[153.10517883 -15.01893616]
[160.43009949 -28.10883522]
[167.75503540 -41.19873428]
[175.07995605 -54.28863525]
[182.40487671 -67.37853241]
[189.72981262 -80.46843719]
[197.05473328 -93.55833435]
[204.37965393 -106.64823151]
[211.70458984 -119.73812866]
[219.02951050 -132.82803345]
[226.35443115 -145.91792297]
[233.67936707 -159.00782776]
[241.00428772 -172.09773254]
[248.32920837 -185.18762207]
[255.65412903 -198.27752686]
[262.80267334 -211.46458435]
[269.77352905 -224.74642944]
[276.74435425 -238.02827454]
[283.71520996 -251.31010437]
[290.68606567 -264.59194946]
[297.65689087 -277.87377930]
[293.78112793 -288.21261597]
[296.25811768 -298.74548340]
[304.01208496 -305.97140503]
[314.25646973 -307.62963867]
[321.93020630 -320.51815796]
[329.60391235 -333.40667725]
[337.27764893 -346.29519653]
[344.95138550 -359.18371582]
[340.82379150 -374.43948364]
[348.76495361 -388.10379028]
[364.06350708 -392.06985474]
[377.64309692 -383.98468018]
[381.44720459 -368.64505005]
[373.21890259 -355.15170288]
[357.83990479 -351.50997925]
[350.16616821 -338.62145996]
[342.49246216 -325.73294067]
[334.81872559 -312.84442139]
[327.14498901 -299.95590210]
[328.43420410 -280.74020386]
[310.93875122 -270.90295410]
[303.96789551 -257.62109375]
[296.99703979 -244.33926392]
[290.02621460 -231.05741882]
[283.05535889 -217.77557373]
[276.08450317 -204.49374390]
[275.75808716 -197.01127625]
[268.74404907 -190.95260620]
[261.41909790 -177.86270142]
[254.09419250 -164.77279663]
[246.76925659 -151.68290710]
[239.44433594 -138.59300232]
[232.11941528 -125.50310516]
[224.79447937 -112.41320801]
[217.46955872 -99.32330322]
[210.14463806 -86.23340607]
[202.81970215 -73.14350891]
[195.49478149 -60.05360794]
[188.16986084 -46.96371078]
[180.84492493 -33.87380981]
[173.52000427 -20.78391075]
[166.19508362 -7.69401073]
[158.87014771 5.39588833]
[151.54522705 18.48578835]
[144.22030640 31.57568741]
[136.89537048 44.66558838]
[129.57044983 57.75548553]
[122.24552155 70.84538269]
[114.92060089 83.93528748]
[107.59567261 97.02518463]
[119.72107697 99.93143463]
[129.20913696 111.20600891]
[131.75378418 128.76992798]
[131.75378418 143.76992798]
[131.75378418 158.76992798]
[131.75378418 173.76992798]
[131.75378418 188.76992798]
[131.75378418 203.76992798]
[131.75378418 218.76992798]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 116]
[2 115]
[3 114]
[4 113]
[5 112]
[6 111]
[7 110]
[12 28]
[13 27]
[14 26]
[29 107]
[30 106]
[31 105]
[32 104]
[33 103]
[34 102]
[35 101]
[36 100]
[37 99]
[38 98]
[39 97]
[40 96]
[41 95]
[42 94]
[43 93]
[44 92]
[45 91]
[46 90]
[47 89]
[48 88]
[49 87]
[50 86]
[51 85]
[52 83]
[53 82]
[54 81]
[55 80]
[56 79]
[57 78]
[61 76]
[62 75]
[63 74]
[64 73]
[65 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
